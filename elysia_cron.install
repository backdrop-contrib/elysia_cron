<?php

/**
 * @file
 * Install, update and uninstall functions for the elysia_cron module.
 */

/**
 * Implements hook_schema().
 */
function elysia_cron_schema() {
  $schema['elysia_cron'] = array(
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 120,
        'not null' => TRUE,
      ),
      'disable' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'rule' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 256,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'context' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 32,
      ),
      'running' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'last_run' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'last_aborted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'abort_count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'last_abort_function' => array(
        'type' => 'varchar',
        'length' => 128,
        'no export' => TRUE,
      ),
      'last_execution_time' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'execution_count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'avg_execution_time' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'max_execution_time' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'last_shutdown_time' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function elysia_cron_install() {
  // Elysia cron MUST be the first returned by module_list.
  // This is to ensure elysia_cron_cron is the first hook
  // called by standard cron.php.
  $query = db_select('system');
  $query->addExpression('MIN(weight)');
  $min = $query->execute()->fetchField();

  $min = ($min > -65535) ? -65535 : --$min;

  db_update('system')
    ->fields(array('weight' => $min))
    ->condition('name', 'elysia_cron')
    ->execute();
}

/**
 * Implements hook_update_last_removed().
 */
function elysia_cron_update_last_removed() {
  return 7205;
}

/**
 * @defgroup updates-7.x-to-1.x Updates from 7.x to 1.x
 * @{
 * Update functions from Drupal 7.x to Backdrop CMS 1.x.
 */

/**
 * Move elysia_cron settings from variables to config.
 */

function elysia_cron_update_1000() {

  // Migrate variables to config.
  $config = config('elysia_cron.settings');
  $config->set('alert_interval', update_variable_get('elysia_cron_alert_interval', 60));
  $config->set('queue_show_count', update_variable_get('elysia_cron_queue_show_count', true));
  $config->set('queue_default_rule', update_variable_get('elysia_cron_queue_default_rule', false));
  $config->set('queue_default_weight', update_variable_get('elysia_cron_queue_default_weight', 100));
  $config->set('default_rule', update_variable_get('elysia_cron_default_rule', "0 * * * *"));
  $config->set('script', update_variable_get('elysia_cron_script', ""));
  $config->set('time_limit', update_variable_get('elysia_cron_time_limit', 240));
  $config->set('disabled', update_variable_get('elysia_cron_disabled', false));
  $config->set('allowed_hosts', update_variable_get('elysia_cron_allowed_hosts', false));
  $config->set('stuck_time', update_variable_get('elysia_cron_stuck_time', 3600));
  $config->set('run_maintenance', update_variable_get('elysia_cron_run_maintenance', false));
  $config->set('debug_messages', update_variable_get('elysia_cron_debug_messages', 0));
  $config->set('default_rules', update_variable_get('elysia_cron_default_rules', array(
    '*/15 * * * *' => 'Every 15 minutes',
    '*/30 * * * *' => 'Every 30 minutes',
    '0 * * * *' => 'Every hour',
    '0 */6 * * *' => 'Every 6 hours',
    '4 0 * * *' => 'Once a day',
    '4 0 * * 0' => 'Once a week',
    '4 0 1 * *' => 'Once a month',
  )));

  $config->save();

  // Delete variables.
  update_variable_del('elysia_cron_alert_interval');
  update_variable_del('elysia_cron_queue_show_count');
  update_variable_del('elysia_cron_queue_default_rule');
  update_variable_del('elysia_cron_queue_default_weight');
  update_variable_del('elysia_cron_default_rule');
  update_variable_del('elysia_cron_script');
  update_variable_del('elysia_cron_time_limit');
  update_variable_del('elysia_cron_disabled');
  update_variable_del('elysia_cron_allowed_hosts');
  update_variable_del('elysia_cron_stuck_time');
  update_variable_del('elysia_cron_run_maintenance');
  update_variable_del('elysia_cron_debug_messages');
  update_variable_del('elysia_cron_default_rules');

  // Delete variables which were not captured in last section and no longer needed
  $result = db_query('SELECT * FROM {variable} WHERE name LIKE :name', array(':name' => '%elysia_cron_%'));
}

/*
 * @} End of "defgroup updates-7.x-to-1.x"
 * The next series of updates should start at 2000.
 */

